// Implementation file for parser generated by fsyacc
module SMTLib.SMTLibParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "SMTLibParser.fsp"

open SMTLib

# 10 "SMTLibParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | QID
  | SKOLEMID
  | PATTERN
  | NOPATTERN
  | WEIGHT
  | LBLPOS
  | LBLNEG
  | NAMED
  | ASSERT
  | PUSH
  | POP
  | CHECKSAT
  | RESET
  | LABELS
  | ECHO
  | EVAL
  | DECLARESORT
  | DECLAREFUN
  | DEFINEFUN
  | DECLAREDATATYPES
  | SETOPTION
  | SETINFO
  | GETINFO
  | FORALL
  | EXISTS
  | LET
  | ANNOT
  | NOT
  | AND
  | OR
  | IMPLIES
  | EQ
  | LPAREN
  | RPAREN
  | TRUE
  | FALSE
  | STRING of (string)
  | SYMBOL of (string)
  | FLOAT of (float)
  | INT of (bigint)
  | ID of ((string * string))
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_QID
    | TOKEN_SKOLEMID
    | TOKEN_PATTERN
    | TOKEN_NOPATTERN
    | TOKEN_WEIGHT
    | TOKEN_LBLPOS
    | TOKEN_LBLNEG
    | TOKEN_NAMED
    | TOKEN_ASSERT
    | TOKEN_PUSH
    | TOKEN_POP
    | TOKEN_CHECKSAT
    | TOKEN_RESET
    | TOKEN_LABELS
    | TOKEN_ECHO
    | TOKEN_EVAL
    | TOKEN_DECLARESORT
    | TOKEN_DECLAREFUN
    | TOKEN_DEFINEFUN
    | TOKEN_DECLAREDATATYPES
    | TOKEN_SETOPTION
    | TOKEN_SETINFO
    | TOKEN_GETINFO
    | TOKEN_FORALL
    | TOKEN_EXISTS
    | TOKEN_LET
    | TOKEN_ANNOT
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_IMPLIES
    | TOKEN_EQ
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_STRING
    | TOKEN_SYMBOL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stmt
    | NONTERM_datatypeList
    | NONTERM_datatype
    | NONTERM_constructorList
    | NONTERM_constructor_
    | NONTERM_exprList
    | NONTERM_expr
    | NONTERM_argList
    | NONTERM_arg
    | NONTERM_annotList
    | NONTERM_annot
    | NONTERM_value

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | QID  -> 1 
  | SKOLEMID  -> 2 
  | PATTERN  -> 3 
  | NOPATTERN  -> 4 
  | WEIGHT  -> 5 
  | LBLPOS  -> 6 
  | LBLNEG  -> 7 
  | NAMED  -> 8 
  | ASSERT  -> 9 
  | PUSH  -> 10 
  | POP  -> 11 
  | CHECKSAT  -> 12 
  | RESET  -> 13 
  | LABELS  -> 14 
  | ECHO  -> 15 
  | EVAL  -> 16 
  | DECLARESORT  -> 17 
  | DECLAREFUN  -> 18 
  | DEFINEFUN  -> 19 
  | DECLAREDATATYPES  -> 20 
  | SETOPTION  -> 21 
  | SETINFO  -> 22 
  | GETINFO  -> 23 
  | FORALL  -> 24 
  | EXISTS  -> 25 
  | LET  -> 26 
  | ANNOT  -> 27 
  | NOT  -> 28 
  | AND  -> 29 
  | OR  -> 30 
  | IMPLIES  -> 31 
  | EQ  -> 32 
  | LPAREN  -> 33 
  | RPAREN  -> 34 
  | TRUE  -> 35 
  | FALSE  -> 36 
  | STRING _ -> 37 
  | SYMBOL _ -> 38 
  | FLOAT _ -> 39 
  | INT _ -> 40 
  | ID _ -> 41 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_QID 
  | 2 -> TOKEN_SKOLEMID 
  | 3 -> TOKEN_PATTERN 
  | 4 -> TOKEN_NOPATTERN 
  | 5 -> TOKEN_WEIGHT 
  | 6 -> TOKEN_LBLPOS 
  | 7 -> TOKEN_LBLNEG 
  | 8 -> TOKEN_NAMED 
  | 9 -> TOKEN_ASSERT 
  | 10 -> TOKEN_PUSH 
  | 11 -> TOKEN_POP 
  | 12 -> TOKEN_CHECKSAT 
  | 13 -> TOKEN_RESET 
  | 14 -> TOKEN_LABELS 
  | 15 -> TOKEN_ECHO 
  | 16 -> TOKEN_EVAL 
  | 17 -> TOKEN_DECLARESORT 
  | 18 -> TOKEN_DECLAREFUN 
  | 19 -> TOKEN_DEFINEFUN 
  | 20 -> TOKEN_DECLAREDATATYPES 
  | 21 -> TOKEN_SETOPTION 
  | 22 -> TOKEN_SETINFO 
  | 23 -> TOKEN_GETINFO 
  | 24 -> TOKEN_FORALL 
  | 25 -> TOKEN_EXISTS 
  | 26 -> TOKEN_LET 
  | 27 -> TOKEN_ANNOT 
  | 28 -> TOKEN_NOT 
  | 29 -> TOKEN_AND 
  | 30 -> TOKEN_OR 
  | 31 -> TOKEN_IMPLIES 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_LPAREN 
  | 34 -> TOKEN_RPAREN 
  | 35 -> TOKEN_TRUE 
  | 36 -> TOKEN_FALSE 
  | 37 -> TOKEN_STRING 
  | 38 -> TOKEN_SYMBOL 
  | 39 -> TOKEN_FLOAT 
  | 40 -> TOKEN_INT 
  | 41 -> TOKEN_ID 
  | 44 -> TOKEN_end_of_input
  | 42 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_start 
    | 4 -> NONTERM_stmt 
    | 5 -> NONTERM_stmt 
    | 6 -> NONTERM_stmt 
    | 7 -> NONTERM_stmt 
    | 8 -> NONTERM_stmt 
    | 9 -> NONTERM_stmt 
    | 10 -> NONTERM_stmt 
    | 11 -> NONTERM_stmt 
    | 12 -> NONTERM_stmt 
    | 13 -> NONTERM_stmt 
    | 14 -> NONTERM_stmt 
    | 15 -> NONTERM_stmt 
    | 16 -> NONTERM_stmt 
    | 17 -> NONTERM_stmt 
    | 18 -> NONTERM_stmt 
    | 19 -> NONTERM_stmt 
    | 20 -> NONTERM_stmt 
    | 21 -> NONTERM_stmt 
    | 22 -> NONTERM_datatypeList 
    | 23 -> NONTERM_datatypeList 
    | 24 -> NONTERM_datatypeList 
    | 25 -> NONTERM_datatype 
    | 26 -> NONTERM_constructorList 
    | 27 -> NONTERM_constructorList 
    | 28 -> NONTERM_constructorList 
    | 29 -> NONTERM_constructor_ 
    | 30 -> NONTERM_exprList 
    | 31 -> NONTERM_exprList 
    | 32 -> NONTERM_exprList 
    | 33 -> NONTERM_expr 
    | 34 -> NONTERM_expr 
    | 35 -> NONTERM_expr 
    | 36 -> NONTERM_expr 
    | 37 -> NONTERM_expr 
    | 38 -> NONTERM_expr 
    | 39 -> NONTERM_expr 
    | 40 -> NONTERM_expr 
    | 41 -> NONTERM_expr 
    | 42 -> NONTERM_expr 
    | 43 -> NONTERM_expr 
    | 44 -> NONTERM_expr 
    | 45 -> NONTERM_argList 
    | 46 -> NONTERM_argList 
    | 47 -> NONTERM_argList 
    | 48 -> NONTERM_arg 
    | 49 -> NONTERM_annotList 
    | 50 -> NONTERM_annotList 
    | 51 -> NONTERM_annotList 
    | 52 -> NONTERM_annot 
    | 53 -> NONTERM_annot 
    | 54 -> NONTERM_annot 
    | 55 -> NONTERM_annot 
    | 56 -> NONTERM_annot 
    | 57 -> NONTERM_annot 
    | 58 -> NONTERM_annot 
    | 59 -> NONTERM_annot 
    | 60 -> NONTERM_value 
    | 61 -> NONTERM_value 
    | 62 -> NONTERM_value 
    | 63 -> NONTERM_value 
    | 64 -> NONTERM_value 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 44 
let _fsyacc_tagOfErrorTerminal = 42

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | QID  -> "QID" 
  | SKOLEMID  -> "SKOLEMID" 
  | PATTERN  -> "PATTERN" 
  | NOPATTERN  -> "NOPATTERN" 
  | WEIGHT  -> "WEIGHT" 
  | LBLPOS  -> "LBLPOS" 
  | LBLNEG  -> "LBLNEG" 
  | NAMED  -> "NAMED" 
  | ASSERT  -> "ASSERT" 
  | PUSH  -> "PUSH" 
  | POP  -> "POP" 
  | CHECKSAT  -> "CHECKSAT" 
  | RESET  -> "RESET" 
  | LABELS  -> "LABELS" 
  | ECHO  -> "ECHO" 
  | EVAL  -> "EVAL" 
  | DECLARESORT  -> "DECLARESORT" 
  | DECLAREFUN  -> "DECLAREFUN" 
  | DEFINEFUN  -> "DEFINEFUN" 
  | DECLAREDATATYPES  -> "DECLAREDATATYPES" 
  | SETOPTION  -> "SETOPTION" 
  | SETINFO  -> "SETINFO" 
  | GETINFO  -> "GETINFO" 
  | FORALL  -> "FORALL" 
  | EXISTS  -> "EXISTS" 
  | LET  -> "LET" 
  | ANNOT  -> "ANNOT" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | IMPLIES  -> "IMPLIES" 
  | EQ  -> "EQ" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | STRING _ -> "STRING" 
  | SYMBOL _ -> "SYMBOL" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | QID  -> (null : System.Object) 
  | SKOLEMID  -> (null : System.Object) 
  | PATTERN  -> (null : System.Object) 
  | NOPATTERN  -> (null : System.Object) 
  | WEIGHT  -> (null : System.Object) 
  | LBLPOS  -> (null : System.Object) 
  | LBLNEG  -> (null : System.Object) 
  | NAMED  -> (null : System.Object) 
  | ASSERT  -> (null : System.Object) 
  | PUSH  -> (null : System.Object) 
  | POP  -> (null : System.Object) 
  | CHECKSAT  -> (null : System.Object) 
  | RESET  -> (null : System.Object) 
  | LABELS  -> (null : System.Object) 
  | ECHO  -> (null : System.Object) 
  | EVAL  -> (null : System.Object) 
  | DECLARESORT  -> (null : System.Object) 
  | DECLAREFUN  -> (null : System.Object) 
  | DEFINEFUN  -> (null : System.Object) 
  | DECLAREDATATYPES  -> (null : System.Object) 
  | SETOPTION  -> (null : System.Object) 
  | SETINFO  -> (null : System.Object) 
  | GETINFO  -> (null : System.Object) 
  | FORALL  -> (null : System.Object) 
  | EXISTS  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | ANNOT  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | IMPLIES  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SYMBOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 2us; 65535us; 0us; 1us; 3us; 4us; 2us; 65535us; 0us; 3us; 3us; 3us; 2us; 65535us; 41us; 42us; 68us; 69us; 2us; 65535us; 41us; 68us; 68us; 68us; 2us; 65535us; 71us; 72us; 74us; 75us; 2us; 65535us; 71us; 74us; 74us; 74us; 7us; 65535us; 24us; 25us; 38us; 39us; 80us; 81us; 84us; 85us; 90us; 91us; 93us; 94us; 149us; 150us; 25us; 65535us; 7us; 8us; 11us; 12us; 24us; 80us; 26us; 27us; 33us; 34us; 34us; 35us; 38us; 80us; 45us; 46us; 65us; 66us; 80us; 80us; 84us; 80us; 87us; 88us; 90us; 80us; 93us; 80us; 96us; 97us; 97us; 98us; 100us; 101us; 101us; 102us; 104us; 105us; 111us; 112us; 117us; 118us; 123us; 124us; 129us; 130us; 146us; 147us; 149us; 80us; 6us; 65535us; 31us; 32us; 77us; 78us; 109us; 110us; 115us; 116us; 121us; 122us; 126us; 127us; 6us; 65535us; 31us; 126us; 77us; 126us; 109us; 126us; 115us; 126us; 121us; 126us; 126us; 126us; 2us; 65535us; 105us; 106us; 132us; 133us; 2us; 65535us; 105us; 132us; 132us; 132us; 26us; 65535us; 7us; 82us; 11us; 82us; 24us; 82us; 26us; 82us; 33us; 82us; 34us; 82us; 38us; 82us; 45us; 82us; 62us; 63us; 65us; 82us; 80us; 82us; 84us; 82us; 87us; 82us; 90us; 82us; 93us; 82us; 96us; 82us; 97us; 82us; 100us; 82us; 101us; 82us; 104us; 82us; 111us; 82us; 117us; 82us; 123us; 82us; 129us; 82us; 146us; 82us; 149us; 82us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 4us; 7us; 10us; 13us; 16us; 19us; 27us; 53us; 60us; 67us; 70us; 73us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 1us; 3us; 18us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 7us; 8us; 2us; 7us; 8us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 1us; 13us; 1us; 13us; 1us; 14us; 2us; 15us; 16us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 2us; 23us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 2us; 27us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 2us; 31us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 10us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 2us; 46us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 48us; 2us; 50us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 55us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 119us; 121us; 123us; 125us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 161us; 163us; 165us; 167us; 169us; 171us; 174us; 176us; 178us; 180us; 182us; 184us; 187us; 189us; 191us; 193us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 289us; 291us; 293us; 295us; 297us; 299us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; 348us; |]
let _fsyacc_action_rows = 157
let _fsyacc_actionTableElements = [|2us; 32768us; 0us; 2us; 33us; 5us; 0us; 49152us; 0us; 16385us; 2us; 16386us; 0us; 2us; 33us; 5us; 0us; 16387us; 15us; 32768us; 9us; 45us; 10us; 48us; 11us; 52us; 12us; 56us; 13us; 58us; 14us; 60us; 15us; 62us; 16us; 65us; 17us; 17us; 18us; 22us; 19us; 29us; 20us; 37us; 21us; 6us; 22us; 10us; 23us; 14us; 1us; 32768us; 38us; 7us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 9us; 0us; 16388us; 1us; 32768us; 38us; 11us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 13us; 0us; 16389us; 1us; 32768us; 38us; 15us; 1us; 32768us; 34us; 16us; 0us; 16390us; 1us; 32768us; 41us; 18us; 2us; 32768us; 34us; 19us; 40us; 20us; 0us; 16391us; 1us; 32768us; 34us; 21us; 0us; 16392us; 1us; 32768us; 41us; 23us; 1us; 32768us; 33us; 24us; 7us; 16414us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 26us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 28us; 0us; 16393us; 1us; 32768us; 41us; 30us; 1us; 32768us; 33us; 31us; 1us; 16429us; 33us; 128us; 1us; 32768us; 34us; 33us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 36us; 0us; 16394us; 1us; 32768us; 33us; 38us; 7us; 16414us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 40us; 1us; 32768us; 33us; 41us; 1us; 16406us; 33us; 70us; 1us; 32768us; 34us; 43us; 1us; 32768us; 34us; 44us; 0us; 16395us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 47us; 0us; 16396us; 2us; 32768us; 34us; 51us; 40us; 49us; 1us; 32768us; 34us; 50us; 0us; 16397us; 0us; 16398us; 2us; 32768us; 34us; 55us; 40us; 53us; 1us; 32768us; 34us; 54us; 0us; 16399us; 0us; 16400us; 1us; 32768us; 34us; 57us; 0us; 16401us; 1us; 32768us; 34us; 59us; 0us; 16402us; 1us; 32768us; 34us; 61us; 0us; 16403us; 5us; 32768us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 1us; 32768us; 34us; 64us; 0us; 16404us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 67us; 0us; 16405us; 1us; 16406us; 33us; 70us; 0us; 16408us; 1us; 32768us; 41us; 71us; 1us; 16410us; 33us; 76us; 1us; 32768us; 34us; 73us; 0us; 16409us; 1us; 16410us; 33us; 76us; 0us; 16412us; 1us; 32768us; 41us; 77us; 1us; 16429us; 33us; 128us; 1us; 32768us; 34us; 79us; 0us; 16413us; 7us; 16414us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 16us; 16414us; 24us; 108us; 25us; 114us; 26us; 120us; 27us; 104us; 28us; 87us; 29us; 90us; 30us; 93us; 31us; 96us; 32us; 100us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 86us; 0us; 16419us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 89us; 0us; 16420us; 7us; 16414us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 92us; 0us; 16421us; 7us; 16414us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 95us; 0us; 16422us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 99us; 0us; 16423us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 103us; 0us; 16424us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 8us; 16433us; 1us; 134us; 2us; 136us; 3us; 148us; 4us; 146us; 5us; 138us; 6us; 140us; 7us; 142us; 8us; 144us; 1us; 32768us; 34us; 107us; 0us; 16425us; 1us; 32768us; 33us; 109us; 1us; 16429us; 33us; 128us; 1us; 32768us; 34us; 111us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 113us; 0us; 16426us; 1us; 32768us; 33us; 115us; 1us; 16429us; 33us; 128us; 1us; 32768us; 34us; 117us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 119us; 0us; 16427us; 1us; 32768us; 33us; 121us; 1us; 16429us; 33us; 128us; 1us; 32768us; 34us; 123us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 125us; 0us; 16428us; 1us; 16429us; 33us; 128us; 0us; 16431us; 1us; 32768us; 41us; 129us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 131us; 0us; 16432us; 8us; 16433us; 1us; 134us; 2us; 136us; 3us; 148us; 4us; 146us; 5us; 138us; 6us; 140us; 7us; 142us; 8us; 144us; 0us; 16435us; 1us; 32768us; 41us; 135us; 0us; 16436us; 1us; 32768us; 41us; 137us; 0us; 16437us; 1us; 32768us; 40us; 139us; 0us; 16438us; 1us; 32768us; 41us; 141us; 0us; 16439us; 1us; 32768us; 41us; 143us; 0us; 16440us; 1us; 32768us; 41us; 145us; 0us; 16441us; 7us; 32768us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 0us; 16442us; 1us; 32768us; 33us; 149us; 7us; 16414us; 33us; 84us; 35us; 155us; 36us; 156us; 37us; 152us; 39us; 154us; 40us; 153us; 41us; 83us; 1us; 32768us; 34us; 151us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 8us; 9us; 25us; 27us; 35us; 37us; 38us; 40us; 48us; 50us; 51us; 53us; 55us; 56us; 58us; 61us; 62us; 64us; 65us; 67us; 69us; 77us; 79us; 87us; 89us; 90us; 92us; 94us; 96us; 98us; 106us; 114us; 116us; 117us; 119us; 127us; 129us; 131us; 133us; 135us; 137us; 138us; 146us; 148us; 149us; 152us; 154us; 155us; 156us; 159us; 161us; 162us; 163us; 165us; 166us; 168us; 169us; 171us; 172us; 178us; 180us; 181us; 189us; 191us; 192us; 194us; 195us; 197us; 199us; 201us; 202us; 204us; 205us; 207us; 209us; 211us; 212us; 220us; 221us; 222us; 223us; 240us; 242us; 243us; 251us; 253us; 254us; 262us; 264us; 265us; 273us; 275us; 276us; 284us; 292us; 294us; 295us; 303us; 311us; 313us; 314us; 322us; 331us; 333us; 334us; 336us; 338us; 340us; 348us; 350us; 351us; 353us; 355us; 357us; 365us; 367us; 368us; 370us; 372us; 374us; 382us; 384us; 385us; 387us; 388us; 390us; 398us; 400us; 401us; 410us; 411us; 413us; 414us; 416us; 417us; 419us; 420us; 422us; 423us; 425us; 426us; 428us; 429us; 437us; 438us; 440us; 448us; 450us; 451us; 452us; 453us; 454us; 455us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 5us; 5us; 4us; 4us; 5us; 8us; 9us; 9us; 4us; 4us; 3us; 4us; 3us; 3us; 3us; 3us; 4us; 4us; 0us; 1us; 2us; 4us; 0us; 1us; 2us; 4us; 0us; 1us; 2us; 1us; 1us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 7us; 7us; 7us; 0us; 1us; 2us; 4us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 65535us; 16397us; 16398us; 65535us; 65535us; 16399us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 16405us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16412us; 65535us; 65535us; 65535us; 16413us; 65535us; 16416us; 16417us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 16420us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 16428us; 65535us; 16431us; 65535us; 65535us; 65535us; 16432us; 65535us; 16435us; 65535us; 16436us; 65535us; 16437us; 65535us; 16438us; 65535us; 16439us; 65535us; 16440us; 65535us; 16441us; 65535us; 16442us; 65535us; 65535us; 65535us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; |]
let _fsyacc_reductions ()  =    [| 
# 388 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : stmt list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 397 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "SMTLibParser.fsp"
                               [] 
                   )
# 27 "SMTLibParser.fsp"
                 : stmt list));
# 407 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "SMTLibParser.fsp"
                                [_1] 
                   )
# 28 "SMTLibParser.fsp"
                 : stmt list));
# 418 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : stmt list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "SMTLibParser.fsp"
                                      _1 :: _2 
                   )
# 29 "SMTLibParser.fsp"
                 : stmt list));
# 430 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "SMTLibParser.fsp"
                           SetOption(_3, _4) 
                   )
# 33 "SMTLibParser.fsp"
                 : 'stmt));
# 442 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "SMTLibParser.fsp"
                           SetInfo(_3, _4) 
                   )
# 35 "SMTLibParser.fsp"
                 : 'stmt));
# 454 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "SMTLibParser.fsp"
                           GetInfo(_3) 
                   )
# 37 "SMTLibParser.fsp"
                 : 'stmt));
# 465 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "SMTLibParser.fsp"
                           DeclareSort(_3, System.Numerics.BigInteger.Parse("0")) 
                   )
# 39 "SMTLibParser.fsp"
                 : 'stmt));
# 476 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "SMTLibParser.fsp"
                           DeclareSort(_3, _4) 
                   )
# 41 "SMTLibParser.fsp"
                 : 'stmt));
# 488 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "SMTLibParser.fsp"
                           DeclareFun(_3, _5, _7) 
                   )
# 43 "SMTLibParser.fsp"
                 : 'stmt));
# 501 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'argList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "SMTLibParser.fsp"
                           DefineFun(_3, _5, _7, _8) 
                   )
# 45 "SMTLibParser.fsp"
                 : 'stmt));
# 515 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'datatypeList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "SMTLibParser.fsp"
                           DeclareDatatypes(_4, _7) 
                   )
# 47 "SMTLibParser.fsp"
                 : 'stmt));
# 527 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "SMTLibParser.fsp"
                                                     Assert(_3) 
                   )
# 48 "SMTLibParser.fsp"
                 : 'stmt));
# 538 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "SMTLibParser.fsp"
                                                  Push(Some(_3)) 
                   )
# 49 "SMTLibParser.fsp"
                 : 'stmt));
# 549 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "SMTLibParser.fsp"
                                              Push(None) 
                   )
# 50 "SMTLibParser.fsp"
                 : 'stmt));
# 559 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "SMTLibParser.fsp"
                                                 Pop(Some(_3)) 
                   )
# 51 "SMTLibParser.fsp"
                 : 'stmt));
# 570 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "SMTLibParser.fsp"
                                             Pop(None) 
                   )
# 52 "SMTLibParser.fsp"
                 : 'stmt));
# 580 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "SMTLibParser.fsp"
                                                   CheckSat 
                   )
# 53 "SMTLibParser.fsp"
                 : 'stmt));
# 590 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "SMTLibParser.fsp"
                                                Reset 
                   )
# 54 "SMTLibParser.fsp"
                 : 'stmt));
# 600 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "SMTLibParser.fsp"
                                                 Labels 
                   )
# 55 "SMTLibParser.fsp"
                 : 'stmt));
# 610 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "SMTLibParser.fsp"
                                                    Echo(_3) 
                   )
# 56 "SMTLibParser.fsp"
                 : 'stmt));
# 621 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "SMTLibParser.fsp"
                                                   Eval(_3) 
                   )
# 57 "SMTLibParser.fsp"
                 : 'stmt));
# 632 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "SMTLibParser.fsp"
                           [] 
                   )
# 60 "SMTLibParser.fsp"
                 : 'datatypeList));
# 642 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'datatype)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "SMTLibParser.fsp"
                                    [_1] 
                   )
# 61 "SMTLibParser.fsp"
                 : 'datatypeList));
# 653 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'datatype)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'datatypeList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "SMTLibParser.fsp"
                                                 _1 :: _2 
                   )
# 62 "SMTLibParser.fsp"
                 : 'datatypeList));
# 665 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'constructorList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "SMTLibParser.fsp"
                                                           (_2, _3)
                   )
# 65 "SMTLibParser.fsp"
                 : 'datatype));
# 677 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "SMTLibParser.fsp"
                           [] 
                   )
# 68 "SMTLibParser.fsp"
                 : 'constructorList));
# 687 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constructor_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "SMTLibParser.fsp"
                                        [_1] 
                   )
# 69 "SMTLibParser.fsp"
                 : 'constructorList));
# 698 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constructor_)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'constructorList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "SMTLibParser.fsp"
                                                        _1 :: _2 
                   )
# 70 "SMTLibParser.fsp"
                 : 'constructorList));
# 710 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "SMTLibParser.fsp"
                                                   (_2, _3)
                   )
# 73 "SMTLibParser.fsp"
                 : 'constructor_));
# 722 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "SMTLibParser.fsp"
                           [] 
                   )
# 76 "SMTLibParser.fsp"
                 : 'exprList));
# 732 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "SMTLibParser.fsp"
                                [_1] 
                   )
# 77 "SMTLibParser.fsp"
                 : 'exprList));
# 743 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "SMTLibParser.fsp"
                                         _1 :: _2 
                   )
# 78 "SMTLibParser.fsp"
                 : 'exprList));
# 755 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "SMTLibParser.fsp"
                                 Val(_1) 
                   )
# 81 "SMTLibParser.fsp"
                 : 'expr));
# 766 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "SMTLibParser.fsp"
                              Id(_1) 
                   )
# 82 "SMTLibParser.fsp"
                 : 'expr));
# 777 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "SMTLibParser.fsp"
                                                  Lst _2 
                   )
# 83 "SMTLibParser.fsp"
                 : 'expr));
# 788 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "SMTLibParser.fsp"
                                                  Not(_3) 
                   )
# 84 "SMTLibParser.fsp"
                 : 'expr));
# 799 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "SMTLibParser.fsp"
                                                      And(_3) 
                   )
# 85 "SMTLibParser.fsp"
                 : 'expr));
# 810 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "SMTLibParser.fsp"
                                                     Or(_3) 
                   )
# 86 "SMTLibParser.fsp"
                 : 'expr));
# 821 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "SMTLibParser.fsp"
                                                           Implies(_3,_4) 
                   )
# 87 "SMTLibParser.fsp"
                 : 'expr));
# 833 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "SMTLibParser.fsp"
                                                      Eq(_3,_4) 
                   )
# 88 "SMTLibParser.fsp"
                 : 'expr));
# 845 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'annotList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "SMTLibParser.fsp"
                           Annot(_4, _3) 
                   )
# 90 "SMTLibParser.fsp"
                 : 'expr));
# 857 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "SMTLibParser.fsp"
                           Forall(_4, _6) 
                   )
# 92 "SMTLibParser.fsp"
                 : 'expr));
# 869 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "SMTLibParser.fsp"
                           Exists(_4, _6) 
                   )
# 94 "SMTLibParser.fsp"
                 : 'expr));
# 881 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "SMTLibParser.fsp"
                           Let(_4, _6) 
                   )
# 96 "SMTLibParser.fsp"
                 : 'expr));
# 893 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "SMTLibParser.fsp"
                           [] 
                   )
# 99 "SMTLibParser.fsp"
                 : 'argList));
# 903 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "SMTLibParser.fsp"
                               [_1] 
                   )
# 100 "SMTLibParser.fsp"
                 : 'argList));
# 914 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "SMTLibParser.fsp"
                                       _1 :: _2 
                   )
# 101 "SMTLibParser.fsp"
                 : 'argList));
# 926 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "SMTLibParser.fsp"
                                                 (_2, _3) 
                   )
# 104 "SMTLibParser.fsp"
                 : 'arg));
# 938 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "SMTLibParser.fsp"
                           [] 
                   )
# 107 "SMTLibParser.fsp"
                 : 'annotList));
# 948 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'annot)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "SMTLibParser.fsp"
                                 [_1] 
                   )
# 108 "SMTLibParser.fsp"
                 : 'annotList));
# 959 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'annot)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'annotList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "SMTLibParser.fsp"
                                           _1 :: _2 
                   )
# 109 "SMTLibParser.fsp"
                 : 'annotList));
# 971 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "SMTLibParser.fsp"
                                  QId(_2) 
                   )
# 112 "SMTLibParser.fsp"
                 : 'annot));
# 982 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "SMTLibParser.fsp"
                                       SkolemId(_2) 
                   )
# 113 "SMTLibParser.fsp"
                 : 'annot));
# 993 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "SMTLibParser.fsp"
                                      Weight(_2) 
                   )
# 114 "SMTLibParser.fsp"
                 : 'annot));
# 1004 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "SMTLibParser.fsp"
                                     LblPos(_2) 
                   )
# 115 "SMTLibParser.fsp"
                 : 'annot));
# 1015 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "SMTLibParser.fsp"
                                     LblNeg(_2) 
                   )
# 116 "SMTLibParser.fsp"
                 : 'annot));
# 1026 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : (string * string))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "SMTLibParser.fsp"
                                    Named(_2) 
                   )
# 117 "SMTLibParser.fsp"
                 : 'annot));
# 1037 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "SMTLibParser.fsp"
                                          NoPattern(_2) 
                   )
# 118 "SMTLibParser.fsp"
                 : 'annot));
# 1048 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "SMTLibParser.fsp"
                                                          Pattern(_3) 
                   )
# 119 "SMTLibParser.fsp"
                 : 'annot));
# 1059 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "SMTLibParser.fsp"
                                  String(_1) 
                   )
# 122 "SMTLibParser.fsp"
                 : 'value));
# 1070 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "SMTLibParser.fsp"
                               Int(_1) 
                   )
# 123 "SMTLibParser.fsp"
                 : 'value));
# 1081 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "SMTLibParser.fsp"
                                 Float (_1) 
                   )
# 124 "SMTLibParser.fsp"
                 : 'value));
# 1092 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "SMTLibParser.fsp"
                                Bool(true) 
                   )
# 125 "SMTLibParser.fsp"
                 : 'value));
# 1102 "SMTLibParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "SMTLibParser.fsp"
                                 Bool(false) 
                   )
# 126 "SMTLibParser.fsp"
                 : 'value));
|]
# 1113 "SMTLibParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 45;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : stmt list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
