// Signature file for parser generated by fsyacc
module SMTLib.SMTLibParser
type token = 
  | EOF
  | QID
  | SKOLEMID
  | PATTERN
  | NOPATTERN
  | WEIGHT
  | LBLPOS
  | LBLNEG
  | NAMED
  | ASSERT
  | PUSH
  | POP
  | CHECKSAT
  | RESET
  | LABELS
  | ECHO
  | EVAL
  | DECLARESORT
  | DECLAREFUN
  | DEFINEFUN
  | DECLAREDATATYPES
  | SETOPTION
  | SETINFO
  | GETINFO
  | FORALL
  | EXISTS
  | LET
  | ANNOT
  | NOT
  | AND
  | OR
  | IMPLIES
  | EQ
  | LPAREN
  | RPAREN
  | TRUE
  | FALSE
  | STRING of (string)
  | SYMBOL of (string)
  | FLOAT of (float)
  | INT of (bigint)
  | ID of ((string * string))
type tokenId = 
    | TOKEN_EOF
    | TOKEN_QID
    | TOKEN_SKOLEMID
    | TOKEN_PATTERN
    | TOKEN_NOPATTERN
    | TOKEN_WEIGHT
    | TOKEN_LBLPOS
    | TOKEN_LBLNEG
    | TOKEN_NAMED
    | TOKEN_ASSERT
    | TOKEN_PUSH
    | TOKEN_POP
    | TOKEN_CHECKSAT
    | TOKEN_RESET
    | TOKEN_LABELS
    | TOKEN_ECHO
    | TOKEN_EVAL
    | TOKEN_DECLARESORT
    | TOKEN_DECLAREFUN
    | TOKEN_DEFINEFUN
    | TOKEN_DECLAREDATATYPES
    | TOKEN_SETOPTION
    | TOKEN_SETINFO
    | TOKEN_GETINFO
    | TOKEN_FORALL
    | TOKEN_EXISTS
    | TOKEN_LET
    | TOKEN_ANNOT
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_IMPLIES
    | TOKEN_EQ
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_STRING
    | TOKEN_SYMBOL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stmt
    | NONTERM_datatypeList
    | NONTERM_datatype
    | NONTERM_constructorList
    | NONTERM_constructor_
    | NONTERM_exprList
    | NONTERM_expr
    | NONTERM_argList
    | NONTERM_arg
    | NONTERM_annotList
    | NONTERM_annot
    | NONTERM_value
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (stmt list) 
